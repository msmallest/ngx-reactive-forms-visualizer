{
    "pipes": [],
    "interfaces": [
        {
            "name": "Chainable",
            "id": "interface-Chainable-50106d51002d4bedebb6a655d3b78d205df7af9784d71d63dd6c2131ae4aa879ede19c99a60d2a515e34b1deadcf6596a60bf767f166179f571342e8670e01df",
            "file": "cypress/support/component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import './commands';\n\n// Alternatively you can use CommonJS syntax:\n// require('./commands')\n\nimport { mount } from 'cypress/angular';\n\n// Augment the Cypress namespace to include type definitions for\n// your custom command.\n// Alternatively, can be defined in cypress/support/component.d.ts\n// with a <reference path=\"./component\" /> at the top of your spec.\ndeclare global {\n    namespace Cypress {\n        interface Chainable {\n            mount: typeof mount;\n        }\n    }\n}\n\nCypress.Commands.add('mount', mount);\n\n// Example use:\n// cy.mount(MyComponent)\n",
            "properties": [
                {
                    "name": "mount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "projects/testing/src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "TestClass",
            "id": "class-TestClass-20a72d71057806ea5c7fa7cbafec2e42d4888afb0561c4eb10e21ca729a02de36721d2b5ccd3e05071f51a3d6b1acd776b1b518dd8a387cae54767cb22228bc4",
            "file": "projects/testing/src/app/models/test-model.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class TestClass {\n    public field: string;\n    constructor() {\n        this.field = '';\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 2
            },
            "properties": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-cfdf008b8c75acb618f41066c560c88bc4798c2d9f609a3ab660305ded13a453dbfa0475e1ce1b6f2f8c01c6579f9f0bbbafe15d881a53d2d437763d41a62baa",
            "file": "projects/testing/src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "arr",
                    "defaultValue": "['1', '2']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "count",
                    "defaultValue": "signal(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<number>",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "countObj",
                    "defaultValue": "signal({\n        name: 'thingy',\n        count: 1,\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "doubleCount",
                    "defaultValue": "computed(() => this.count() * 2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Signal<number>",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "doubleCountObj",
                    "defaultValue": "computed(() => {\n        return { name: this.countObj().name, count: this.countObj().count * 2 };\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Signal<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "exampleForm",
                    "defaultValue": "this.fb.group({\n        name: ['', Validators.required],\n        town: [''],\n        addressNumber: [null],\n        nickname: [''],\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "snippet",
                    "defaultValue": "'<pre>{{form.value | json}}</pre>'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "stuff",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "thing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TestClass",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "methodsClass": [
                {
                    "name": "updateValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "MatDividerModule",
                    "type": "module"
                },
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "BasicPreComponent",
                    "type": "component"
                },
                {
                    "name": "ValidationStatusTreeComponent",
                    "type": "component"
                },
                {
                    "name": "JsonPipe",
                    "type": "pipe"
                },
                {
                    "name": "TestComponent",
                    "type": "component"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Signal, WritableSignal, computed, effect, signal } from '@angular/core';\nimport { NonNullableFormBuilder, Validators, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { NgIf, JsonPipe } from '@angular/common';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { TestClass } from 'modelsZZZZ/test-model.model';\nimport { TestComponent } from './test/test.component';\nimport { BasicPreComponent, ValidationStatusTreeComponent } from 'ngx-reactive-forms-visualizer';\n// import { BasicPreComponent, ValidationStatusTreeComponent } from 'dist/ngx-reactive-forms-visualizer';\n// import { BasicPreComponent, ValidationStatusTreeComponent } from 'projects/ngx-reactive-forms-visualizer';\nimport { MatButtonModule } from '@angular/material/button';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss'],\n    standalone: true,\n    imports: [\n        FormsModule,\n        ReactiveFormsModule,\n        MatFormFieldModule,\n        MatInputModule,\n        NgIf,\n        MatDividerModule,\n        MatCardModule,\n        BasicPreComponent,\n        ValidationStatusTreeComponent,\n        JsonPipe,\n        TestComponent,\n        MatButtonModule,\n    ],\n})\nexport class AppComponent {\n    exampleForm = this.fb.group({\n        name: ['', Validators.required],\n        town: [''],\n        addressNumber: [null],\n        nickname: [''],\n    });\n    snippet = '<pre>{{form.value | json}}</pre>';\n\n    thing!: TestClass;\n\n    stuff = null;\n\n    arr = ['1', '2'];\n\n    count: WritableSignal<number> = signal(1);\n    doubleCount: Signal<number> = computed(() => this.count() * 2);\n\n    countObj: WritableSignal<{ name: string; count: number }> = signal({\n        name: 'thingy',\n        count: 1,\n    });\n    doubleCountObj: Signal<{ name: string; count: number }> = computed(() => {\n        return { name: this.countObj().name, count: this.countObj().count * 2 };\n    });\n\n    updateValue() {\n        this.count.update(value => value + 1);\n        this.countObj.update(value => {\n            return { name: value.name, count: value.count + 1 };\n        });\n    }\n\n    constructor(private fb: NonNullableFormBuilder) {\n        effect(() => {\n            console.log(`The current count is`);\n        });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h1 {\n    text-align: center;\n}\n\n#main-form {\n    min-width: 150px;\n    max-width: 500px;\n    width: 100%;\n}\n\n#examples {\n    margin-top: 1rem;\n}\n\n.example-section + .example-section {\n    margin-top: 0.5rem;\n}\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "NonNullableFormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 66,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "NonNullableFormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<h1>ngx-reactive-forms-visualizer</h1>\n\n<p>{{ count() | json }}</p>\n<p>{{ doubleCount() | json }}</p>\n\n<p>{{ countObj() | json }}</p>\n<p>{{ doubleCountObj() | json }}</p>\n<button mat-raised-button color=\"primary\" (click)=\"updateValue()\">Update</button>\n\n<div>\n    <app-test />\n</div>\n<div>\n    <p>Type here to interact with examples</p>\n    <form [formGroup]=\"exampleForm\" id=\"main-form\">\n        <mat-form-field>\n            <mat-label>Name: </mat-label>\n            <input matInput placeholder=\"name\" [formControl]=\"exampleForm.controls.name\" />\n        </mat-form-field>\n        <mat-error *ngIf=\"exampleForm.controls.name.errors?.['required'] && exampleForm.touched\">\n            Name is required\n        </mat-error>\n    </form>\n</div>\n\n<mat-divider />\n\n<div id=\"examples\">\n    <h2>Examples</h2>\n\n    <div id=\"example-prejson\" class=\"example-section\">\n        <mat-card>\n            <mat-card-header>\n                <mat-card-title\n                    ><code>{{ snippet }}</code></mat-card-title\n                >\n                <mat-card-subtitle>\n                    When working on reactive forms in Angular, a common way to visualize reactive forms is by using\n                    <code>{{ snippet }}</code></mat-card-subtitle\n                >\n            </mat-card-header>\n\n            <mat-card-content>\n                <pre>{{ exampleForm.value | json }}</pre>\n\n                <p>\n                    This library is about taking that idea of displaying the form's data in templates to the next level.\n                </p>\n            </mat-card-content>\n        </mat-card>\n    </div>\n\n    <div id=\"example-librarys-prejson\" class=\"example-section\">\n        <mat-card>\n            <mat-card-header>\n                <mat-card-title><code>lib-basic-pre</code></mat-card-title>\n                <mat-card-subtitle>Here is the same code but in the library's most basic component</mat-card-subtitle>\n            </mat-card-header>\n            <mat-card-content>\n                <lib-basic-pre [formGroupInput]=\"exampleForm\" />\n            </mat-card-content>\n        </mat-card>\n    </div>\n\n    <div id=\"example-librarys-validationstatustree\" class=\"example-section\">\n        <mat-card>\n            <mat-card-header>\n                <mat-card-title><code>lib-validation-status-tree</code></mat-card-title>\n                <mat-card-subtitle>Each form field's status and the form's overall status</mat-card-subtitle>\n            </mat-card-header>\n            <mat-card-content>\n                <lib-validation-status-tree [formGroupElement]=\"exampleForm\" />\n            </mat-card-content>\n        </mat-card>\n    </div>\n</div>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-b5aa6407d63bbbd8d72bb85d178a2b0b713a6c60a989e42ff9d31dc4d9c66e3bd7291409ea757d11af02c8c6aaf1118e99eff1a0351bcce5d24632f0881b87a5",
            "file": "projects/testing/src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button       type=\"button\"\n       (click)=\"onClick.emit($event)\"\n       [ngClass]=\"classes\"\n       [ngStyle]=\"{ 'background-color': backgroundColor }\">\n       {{ label }}\n   </button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 873,
                            "end": 888,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 874,
                                "end": 882,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 42,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 34,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 48,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n    selector: 'storybook-button',\n    standalone: true,\n    imports: [CommonModule],\n    template: ` <button\n        type=\"button\"\n        (click)=\"onClick.emit($event)\"\n        [ngClass]=\"classes\"\n        [ngStyle]=\"{ 'background-color': backgroundColor }\">\n        {{ label }}\n    </button>`,\n    styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n    /**\n     * Is this the principal call to action on the page?\n     */\n    @Input()\n    primary = false;\n\n    /**\n     * What background color to use\n     */\n    @Input()\n    backgroundColor?: string;\n\n    /**\n     * How large should the button be?\n     */\n    @Input()\n    size: 'small' | 'medium' | 'large' = 'medium';\n\n    /**\n     * Button contents\n     *\n     * @required\n     */\n    @Input()\n    label = 'Button';\n\n    /**\n     * Optional click handler\n     */\n    @Output()\n    onClick = new EventEmitter<Event>();\n\n    public get classes(): string[] {\n        const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n        return ['storybook-button', `storybook-button--${this.size}`, mode];\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 50
                    }
                }
            }
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-23847d9bce0d0a4ad10fb9b747f353a6fed3075355e18a353a8e1a90152a6e5fb275b4079c18fcdbd1757375a2ad355dbdf04d653cd6568b05e8c429b5e8eff7",
            "file": "projects/testing/src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>        <div class=\"storybook-header\">\n            <div>\n                <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <g fill=\"none\" fillRule=\"evenodd\">\n                        <path\n                            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n                            fill=\"#FFF\" />\n                        <path d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\" fill=\"#555AB9\" />\n                        <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n                    </g>\n                </svg>\n                <h1>Acme</h1>\n            </div>\n            <div>\n                <div *ngIf=\"user\">\n                    <span class=\"welcome\">\n                        Welcome, <b>{{ user.name }}</b\n                        >!\n                    </span>\n                    <storybook-button *ngIf=\"user\" size=\"small\" (onClick)=\"onLogout.emit($event)\" label=\"Log out\" />\n                </div>\n                <div *ngIf=\"!user\">\n                    <storybook-button\n                        *ngIf=\"!user\"\n                        size=\"small\"\n                        class=\"margin-left\"\n                        (onClick)=\"onLogin.emit($event)\"\n                        label=\"Log in\" />\n                    <storybook-button\n                        *ngIf=\"!user\"\n                        primary\n                        size=\"small\"\n                        primary=\"true\"\n                        class=\"margin-left\"\n                        (onClick)=\"onCreateAccount.emit($event)\"\n                        label=\"Sign up\" />\n                </div>\n            </div>\n        </div>\n    </header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport type { User } from './User';\n\n@Component({\n    selector: 'storybook-header',\n    template: `<header>\n        <div class=\"storybook-header\">\n            <div>\n                <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <g fill=\"none\" fillRule=\"evenodd\">\n                        <path\n                            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n                            fill=\"#FFF\" />\n                        <path d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\" fill=\"#555AB9\" />\n                        <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n                    </g>\n                </svg>\n                <h1>Acme</h1>\n            </div>\n            <div>\n                <div *ngIf=\"user\">\n                    <span class=\"welcome\">\n                        Welcome, <b>{{ user.name }}</b\n                        >!\n                    </span>\n                    <storybook-button *ngIf=\"user\" size=\"small\" (onClick)=\"onLogout.emit($event)\" label=\"Log out\" />\n                </div>\n                <div *ngIf=\"!user\">\n                    <storybook-button\n                        *ngIf=\"!user\"\n                        size=\"small\"\n                        class=\"margin-left\"\n                        (onClick)=\"onLogin.emit($event)\"\n                        label=\"Log in\" />\n                    <storybook-button\n                        *ngIf=\"!user\"\n                        primary\n                        size=\"small\"\n                        primary=\"true\"\n                        class=\"margin-left\"\n                        (onClick)=\"onCreateAccount.emit($event)\"\n                        label=\"Sign up\" />\n                </div>\n            </div>\n        </div>\n    </header>`,\n    styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n    @Input()\n    user: User | null = null;\n\n    @Output()\n    onLogin = new EventEmitter<Event>();\n\n    @Output()\n    onLogout = new EventEmitter<Event>();\n\n    @Output()\n    onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-2fb90bdcc83597f4d02180a337513275c264c5dd87f94d7f40687e1efb85f04371fd65a80174e334680e34fbfdfed2ebd269f51f0b22e1ed815a45f6b611f16d",
            "file": "projects/testing/src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>        <storybook-header\n            [user]=\"user\"\n            (onLogout)=\"doLogout()\"\n            (onLogin)=\"doLogin()\"\n            (onCreateAccount)=\"doCreateAccount()\" />\n        <section class=\"storybook-page\">\n            <h2>Pages in Storybook</h2>\n            <p>\n                We recommend building UIs with a\n                <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    <strong>component-driven</strong>\n                </a>\n                process starting with atomic components and ending with pages.\n            </p>\n            <p>\n                Render pages with mock data. This makes it easy to build and review page states without needing to\n                navigate to them in your app. Here are some handy patterns for managing page data in Storybook:\n            </p>\n            <ul>\n                <li>\n                    Use a higher-level connected component. Storybook helps you compose such data from the \"args\" of\n                    child component stories\n                </li>\n                <li>\n                    Assemble data in the page component from your services. You can mock these services out using\n                    Storybook.\n                </li>\n            </ul>\n            <p>\n                Get a guided tutorial on component-driven development at\n                <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    Storybook tutorials\n                </a>\n                . Read more in the\n                <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n                .\n            </p>\n            <div class=\"tip-wrapper\">\n                <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n                <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <g fill=\"none\" fillRule=\"evenodd\">\n                        <path\n                            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n                            id=\"a\"\n                            fill=\"#999\" />\n                    </g>\n                </svg>\n                Viewports addon in the toolbar\n            </div>\n        </section>\n    </article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 61
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport type { User } from './User';\n\n@Component({\n    selector: 'storybook-page',\n    template: `<article>\n        <storybook-header\n            [user]=\"user\"\n            (onLogout)=\"doLogout()\"\n            (onLogin)=\"doLogin()\"\n            (onCreateAccount)=\"doCreateAccount()\" />\n        <section class=\"storybook-page\">\n            <h2>Pages in Storybook</h2>\n            <p>\n                We recommend building UIs with a\n                <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    <strong>component-driven</strong>\n                </a>\n                process starting with atomic components and ending with pages.\n            </p>\n            <p>\n                Render pages with mock data. This makes it easy to build and review page states without needing to\n                navigate to them in your app. Here are some handy patterns for managing page data in Storybook:\n            </p>\n            <ul>\n                <li>\n                    Use a higher-level connected component. Storybook helps you compose such data from the \"args\" of\n                    child component stories\n                </li>\n                <li>\n                    Assemble data in the page component from your services. You can mock these services out using\n                    Storybook.\n                </li>\n            </ul>\n            <p>\n                Get a guided tutorial on component-driven development at\n                <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    Storybook tutorials\n                </a>\n                . Read more in the\n                <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n                .\n            </p>\n            <div class=\"tip-wrapper\">\n                <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n                <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <g fill=\"none\" fillRule=\"evenodd\">\n                        <path\n                            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n                            id=\"a\"\n                            fill=\"#999\" />\n                    </g>\n                </svg>\n                Viewports addon in the toolbar\n            </div>\n        </section>\n    </article>`,\n    styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n    user: User | null = null;\n\n    doLogout() {\n        this.user = null;\n    }\n\n    doLogin() {\n        this.user = { name: 'Jane Doe' };\n    }\n\n    doCreateAccount() {\n        this.user = { name: 'Jane Doe' };\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\n.storybook-page h2 {\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\n.storybook-page ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.storybook-page .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "TestComponent",
            "id": "component-TestComponent-a48c8e038db4a3df11894247adcf892729aa9ad12a7a5ce1c10cf225f56b8358afe7ff72ac1c9dd715bc4e8ff4c19ce8daf2b7e2efd83a45af8cab16338a56c2",
            "file": "projects/testing/src/app/test/test.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-test",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n    <p>Call pipe {{ stuff | call: capsThis }}</p>\n    <p>Apply pipe: {{ getTargetFieldPlaceholder | apply: type }}</p>\n    <button (click)=\"setType('solid')\">make solid</button>\n    <button (click)=\"setType('liquid')\">make liquid</button>\n</div>\n<mat-divider />\n<div>\n    <p>count: {{ count() }}</p>\n    <p>doubleCount: {{ doubleCount() }}</p>\n    <hr />\n    <p>countObj: {{ countObj().count }}</p>\n    <p>doubleCountObj: {{ doubleCountObj().count }}</p>\n    <button (click)=\"updateValue()\" mat-raised-button color=\"primary\">update value</button>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "count",
                    "defaultValue": "signal(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<number>",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "countObj",
                    "defaultValue": "signal({\n        name: 'thingy',\n        count: 1,\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "doubleCount",
                    "defaultValue": "computed(() => this.count() * 2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Signal<number>",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "doubleCountObj",
                    "defaultValue": "computed(() => {\n        return { name: this.countObj().name, count: this.countObj().count * 2 };\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Signal<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "stuff",
                    "defaultValue": "'stuff'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "type",
                    "defaultValue": "'solid'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"solid\" | \"liquid\"",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methodsClass": [
                {
                    "name": "capsThis",
                    "args": [
                        {
                            "name": "thing",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "thing",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTargetFieldPlaceholder",
                    "args": [
                        {
                            "name": "type",
                            "type": "\"solid\" | \"liquid\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "extraPrompt",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "\"solid\" | \"liquid\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "extraPrompt",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setType",
                    "args": [
                        {
                            "name": "type",
                            "type": "\"solid\" | \"liquid\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "\"solid\" | \"liquid\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "CallPipe",
                    "type": "pipe"
                },
                {
                    "name": "ApplyPipe",
                    "type": "pipe"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatDividerModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Signal, WritableSignal, computed, signal } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CallPipe, ApplyPipe } from 'ngxtension/call-apply';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDividerModule } from '@angular/material/divider';\n\n@Component({\n    selector: 'app-test',\n    standalone: true,\n    imports: [CommonModule, CallPipe, ApplyPipe, MatButtonModule, MatDividerModule],\n    template: `\n        <div>\n            <p>Call pipe {{ stuff | call: capsThis }}</p>\n            <p>Apply pipe: {{ getTargetFieldPlaceholder | apply: type }}</p>\n            <button (click)=\"setType('solid')\">make solid</button>\n            <button (click)=\"setType('liquid')\">make liquid</button>\n        </div>\n        <mat-divider />\n        <div>\n            <p>count: {{ count() }}</p>\n            <p>doubleCount: {{ doubleCount() }}</p>\n            <hr />\n            <p>countObj: {{ countObj().count }}</p>\n            <p>doubleCountObj: {{ doubleCountObj().count }}</p>\n            <button (click)=\"updateValue()\" mat-raised-button color=\"primary\">update value</button>\n        </div>\n    `,\n    styles: [],\n})\nexport class TestComponent {\n    stuff = 'stuff';\n\n    type: 'solid' | 'liquid' = 'solid';\n\n    setType(type: 'solid' | 'liquid') {\n        this.type = type;\n    }\n\n    capsThis(thing: string) {\n        return thing.toUpperCase();\n    }\n\n    getTargetFieldPlaceholder(type: 'solid' | 'liquid', extraPrompt?: string) {\n        return (type === 'solid' ? 'fork' : 'spoon') + (extraPrompt ?? '');\n    }\n\n    count: WritableSignal<number> = signal(1);\n    doubleCount: Signal<number> = computed(() => this.count() * 2);\n\n    countObj: WritableSignal<{ name: string; count: number }> = signal({\n        name: 'thingy',\n        count: 1,\n    });\n    doubleCountObj: Signal<{ name: string; count: number }> = computed(() => {\n        return { name: this.countObj().name, count: this.countObj().count * 2 };\n    });\n\n    updateValue() {\n        this.count.update(value => value + 1);\n        this.countObj.update(value => {\n            return { name: value.name, count: value.count + 1 };\n        });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        }
    ],
    "modules": [
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-4e9f5819ea33cecf4549dd94dc86cb5b577490c074514a25a53d9bb45321dc7a2c5c9d1c2585b11259a59643f256535f8c6510d798b6c486a6d756319f608ff7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/testing/src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes)],\n    exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "BasicPre",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/testing/src/stories/test.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TestComponent>",
                "defaultValue": "(args: TestComponent) => {\n    return {\n        component: TestComponent,\n        template: `<app-test />`,\n        props: {\n            ...args,\n        },\n    };\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/testing/src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        size: 'large',\n        label: 'Button',\n    },\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/testing/src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        user: {\n            name: 'Jane Doe',\n        },\n    },\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/testing/src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    render: (args: Page) => ({\n        props: args,\n    }),\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        const loginButton = await canvas.getByRole('button', {\n            name: /Log in/i,\n        });\n        await userEvent.click(loginButton);\n    },\n}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/testing/src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/testing/src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    render: (args: Page) => ({\n        props: args,\n    }),\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/testing/src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Button>",
                "defaultValue": "{\n    title: 'Example/Button',\n    component: Button,\n    tags: ['autodocs'],\n    render: (args: Button) => ({\n        props: {\n            backgroundColor: null,\n            ...args,\n        },\n    }),\n    argTypes: {\n        backgroundColor: {\n            control: 'color',\n        },\n    },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/testing/src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Header>",
                "defaultValue": "{\n    title: 'Example/Header',\n    component: Header,\n    // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/angular/writing-docs/autodocs\n    tags: ['autodocs'],\n    render: args => ({ props: args }),\n    decorators: [\n        moduleMetadata({\n            declarations: [Button],\n            imports: [CommonModule],\n        }),\n    ],\n    parameters: {\n        // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n        layout: 'fullscreen',\n    },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/testing/src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Page>",
                "defaultValue": "{\n    title: 'Example/Page',\n    component: Page,\n    parameters: {\n        // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n        layout: 'fullscreen',\n    },\n    decorators: [\n        moduleMetadata({\n            declarations: [Button, Header],\n            imports: [CommonModule],\n        }),\n    ],\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/testing/.storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n    parameters: {\n        actions: { argTypesRegex: '^on[A-Z].*' },\n        controls: {\n            matchers: {\n                color: /(background|color)$/i,\n                date: /Date$/i,\n            },\n        },\n    },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/testing/src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        primary: true,\n        label: 'Button',\n    },\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/testing/src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        label: 'Button',\n    },\n}"
            },
            {
                "name": "SimpleState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/testing/src/stories/test.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "BasicPre.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/testing/src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        size: 'small',\n        label: 'Button',\n    },\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Button>",
                "file": "projects/testing/src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Header>",
                "file": "projects/testing/src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Page>",
                "file": "projects/testing/src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/testing/src/stories/test.stories.ts": [
                {
                    "name": "BasicPre",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/testing/src/stories/test.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TestComponent>",
                    "defaultValue": "(args: TestComponent) => {\n    return {\n        component: TestComponent,\n        template: `<app-test />`,\n        props: {\n            ...args,\n        },\n    };\n}"
                },
                {
                    "name": "SimpleState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/testing/src/stories/test.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "BasicPre.bind({})"
                }
            ],
            "projects/testing/src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/testing/src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        size: 'large',\n        label: 'Button',\n    },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/testing/src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Button>",
                    "defaultValue": "{\n    title: 'Example/Button',\n    component: Button,\n    tags: ['autodocs'],\n    render: (args: Button) => ({\n        props: {\n            backgroundColor: null,\n            ...args,\n        },\n    }),\n    argTypes: {\n        backgroundColor: {\n            control: 'color',\n        },\n    },\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/testing/src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        primary: true,\n        label: 'Button',\n    },\n}"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/testing/src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        label: 'Button',\n    },\n}"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/testing/src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        size: 'small',\n        label: 'Button',\n    },\n}"
                }
            ],
            "projects/testing/src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/testing/src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        user: {\n            name: 'Jane Doe',\n        },\n    },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/testing/src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/testing/src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Header>",
                    "defaultValue": "{\n    title: 'Example/Header',\n    component: Header,\n    // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/angular/writing-docs/autodocs\n    tags: ['autodocs'],\n    render: args => ({ props: args }),\n    decorators: [\n        moduleMetadata({\n            declarations: [Button],\n            imports: [CommonModule],\n        }),\n    ],\n    parameters: {\n        // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n        layout: 'fullscreen',\n    },\n}"
                }
            ],
            "projects/testing/src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/testing/src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    render: (args: Page) => ({\n        props: args,\n    }),\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        const loginButton = await canvas.getByRole('button', {\n            name: /Log in/i,\n        });\n        await userEvent.click(loginButton);\n    },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/testing/src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    render: (args: Page) => ({\n        props: args,\n    }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/testing/src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Page>",
                    "defaultValue": "{\n    title: 'Example/Page',\n    component: Page,\n    parameters: {\n        // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n        layout: 'fullscreen',\n    },\n    decorators: [\n        moduleMetadata({\n            declarations: [Button, Header],\n            imports: [CommonModule],\n        }),\n    ],\n}"
                }
            ],
            "projects/testing/.storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/testing/.storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n    parameters: {\n        actions: { argTypesRegex: '^on[A-Z].*' },\n        controls: {\n            matchers: {\n                color: /(background|color)$/i,\n                date: /Date$/i,\n            },\n        },\n    },\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/testing/src/stories/Button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Button>",
                    "file": "projects/testing/src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/testing/src/stories/Header.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Header>",
                    "file": "projects/testing/src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/testing/src/stories/Page.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Page>",
                    "file": "projects/testing/src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 3,
        "status": "low",
        "files": [
            {
                "filePath": "cypress/support/component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Chainable",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/testing/.storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/testing/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/testing/src/app/models/test-model.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TestClass",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/testing/src/app/test/test.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TestComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/testing/src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/testing/src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/testing/src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/testing/src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/testing/src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/testing/src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/testing/src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/testing/src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/testing/src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/testing/src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/testing/src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/testing/src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/testing/src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "projects/testing/src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/testing/src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/testing/src/stories/test.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BasicPre",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/testing/src/stories/test.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SimpleState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}